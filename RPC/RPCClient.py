import xmlrpc.client as RPC
import datetime
s = RPC.ServerProxy('http://localhost:8000')
try:
    f=open("peticiones.txt","r")
    f.close()
    f=open("peticiones.txt","a")
except FileNotFoundError as e:
    f=open("peticiones.txt","w")
    f.write("Archivo generado para observar las peticiones y respuestas especificas que se vayan generando con el uso de este cliente:\n\n")
    f.write("A continuacion se decriben los tipos de datos en formato XML-RPC\n")
    f.write("boolean -- equivalente a bool de python\n")
    f.write("int -- equivalente a int de python, rango de (2^64)-1\n")
    f.write("double o float -- equivalente a float de python, los valores reciben la etiqueta <double>\n")
    f.write("string -- equivalente a str de python\n")
    f.write("array -- equivalente a list o tuple de python, estos parametros son retornados como listas\n")
    f.write("struct -- equivalente a los diccionarios de python, las llaves deben ser de tipo <string> y los valores cualquier tipo aqui mencionado\n")
    f.write("dateTime.iso8601 -- equivalente a DateTime o datetime.datetime de python\n")
    f.write("base64 -- equivalente a Binary, bytes o bytearray de python\n")
    f.write("nil -- equivalente a la constante None de python\n")
    f.write("bigdecimal -- equivalente a decimal.Decimal de python, este tipo solo puede ser valor de retorno\n")
    f.write("\n\n")
opc=""
while opc!="5":
    print("Ingresa la opcion que quieras\n1 Suma\n2 Resta\n3 Multiplicacion\n4 Division\n5 Salir")
    opc=input()
    if opc=="1":
        print("Ingresa el numero 1")
        n1=int(input())
        print("Ingresa el numero 2")
        n2=int(input())
        f.write("Formato de la peticion suma: \n")
        f.write(RPC.dumps((int(n1),int(n2)),methodname='suma'))
        f.write("Formato de la respuesta de la peticion:\n")
        f.write(RPC.dumps((int(n1)+int(n2),),methodresponse=True))
        f.write("\n\n")
        print(s.suma(n1,n2))
    if opc=="2":
        print("Ingresa el numero 1")
        n1=int(input())
        print("Ingresa el numero 2")
        n2=int(input())
        f.write("Formato de la peticion resta: \n")
        f.write(RPC.dumps((int(n1),int(n2)),methodname='resta'))
        f.write("Formato de la respuesta de la peticion:\n")
        f.write(RPC.dumps((int(n1)-int(n2),),methodresponse=True))
        f.write("\n\n")
        print(s.resta(n1,n2))
    if opc=="3":
        print("Ingresa el numero 1")
        n1=int(input())
        print("Ingresa el numero 2")
        n2=int(input())
        f.write("Formato de la peticion multiplicacion: \n")
        f.write(RPC.dumps((int(n1),int(n2)),methodname='multiplicacion'))
        f.write("Formato de la respuesta de la peticion:\n")
        f.write(RPC.dumps((int(n1)*int(n2),),methodresponse=True))
        f.write("\n\n")
        print(s.multiplicacion(n1,n2))
    if opc=="4":
        print("Ingresa el numero 1")
        n1=int(input())
        print("Ingresa el numero 2")
        n2=int(input())
        f.write("Formato de la peticion division: \n")
        f.write(RPC.dumps((int(n1),int(n2)),methodname='division'))
        f.write("Formato de la respuesta de la peticion:\n")
        f.write(RPC.dumps((int(n1)/int(n2),),methodresponse=True))
        f.write("\n\n")
        print(s.division(n1,n2))
    if opc=="5":
        f.close()
        break